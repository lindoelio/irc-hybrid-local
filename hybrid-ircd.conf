/*
 * This is an configuration file for ircd-hybrid
 */

serverinfo {
	name = "irc.local";
	sid = "0HY";
	description = "ircd-hybrid test server";
	network_name = "IRCNetwork";
	network_desc = "IRC Network";

	hub = yes;

	vhost = "*";

	vhost6 = "*";

	default_max_clients = 512;
	max_nick_length = 30;
	max_topic_length = 160;

#	rsa_private_key_file = "etc/rsa.key";
#	ssl_certificate_file = "etc/cert.pem";
#	ssl_dh_param_file = "etc/dhparam.pem";
#	ssl_dh_elliptic_curve = "secp521r1";
#	ssl_cipher_list = "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:AES256-SHA";
#	ssl_message_digest_algorithm = "sha256";
};

admin {
	name = "administrator";
	description = "IRC Server Administrator";
	email = "<administrator@rocket.chat>";
};

class {
	name = "users";
	ping_time = 90 seconds;
	number_per_ip = 200;
	max_local = 200;
	sendq = 200 kbytes;
	recvq = 8000 bytes;
};

class {
	name = "opers";
	ping_time = 90 seconds;
	number_per_ip = 10;
	max_number = 100;
	sendq = 100 kbytes;

	max_channels = 60;

	min_idle = 3 hours;
	max_idle = 8 hours;

	flags = random_idle, hide_idle_from_opers;
};

class {
	name = "server";
	ping_time = 90 seconds;
	connectfreq = 5 minutes;
	max_number = 10;
	sendq = 2 megabytes;
};

motd {
	mask = "*.at";
	mask = "*.de";
	mask = "*.ch";

	file = "etc/german.motd";
};

listen {
	port = 6665 .. 7000;
};

auth {
	user = "*@*";
	class = "opers";
	flags = need_password, exceed_limit, kline_exempt, resv_exempt, no_tilde, can_flood;
};

auth {
	user = "*@*";
	class = "users";
};

operator {
	name = "operator";

	user = "*@*";

	password = "password";
	encrypted = no;

#	rsa_public_key_file = "etc/oper.pub";
#	ssl_certificate_fingerprint = "4C62287BA6776A89CD4F8FF10A62FFB35E79319F51AF6C62C674984974FCCB1D";

	ssl_connection_required = no;

	class = "opers";

	umodes = locops, servnotice, wallop;

	flags = admin, connect, connect:remote, die, globops, kill, kill:remote, kline, module, rehash, restart, set, unkline, unxline, xline;
};

/*
 * connect {}: define a server to connect to
 */
connect {
	name = "services.irc.local";

	host = "127.0.0.1";

	send_password = "password";
	accept_password = "password";

	encrypted = no;

	port = 7000;

	hub_mask = "*";

	class = "server";

#	ssl_cipher_list = "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:AES256-SHA";
#	ssl_certificate_fingerprint = "4C62287BA6776A89CD4F8FF10A62FFB35E79319F51AF6C62C674984974FCCB1D";
#	flags = autoconn, ssl;
};

/*
 * cluster {}:  servers that share klines/unkline/xline/unxline/resv/unresv/locops
 * automatically
 */
cluster {
	name = "*.local";

	type = kline, unkline, locops, xline, resv;
};

resv { mask = "clone*"; reason = "Clone bots"; };
resv { mask = "Global"; reason = "Reserved for services"; };
resv { mask = "ChanServ"; reason = "Reserved for services"; };
resv { mask = "NickServ"; reason = "Reserved for services"; };
resv { mask = "OperServ"; reason = "Reserved for services"; };
resv { mask = "MemoServ"; reason = "Reserved for services"; };
resv { mask = "BotServ"; reason = "Reserved for services"; };
resv { mask = "HelpServ"; reason = "Reserved for services"; };
resv { mask = "HostServ"; reason = "Reserved for services"; };
resv { mask = "StatServ"; reason = "Reserved for services"; };
resv { mask = "#*services*"; reason = "Reserved for services"; };

resv {
	mask = "#helsinki";
	reason = "Channel is reserved for Finnish inhabitants";

	exempt = "FI";
};

gecos {
	name = "*sex*";
	reason = "Possible spambot";
};

service {
	name = "services.irc.local";
};

pseudo {
	command = "IDENTIFY";
	prepend = "IDENTIFY ";
	name = "NickServ";
	target = "NickServ@services.irc.local";
};

pseudo {
	command = "CHANSERV";
	name = "ChanServ";
	target = "ChanServ@services.irc.local";
};

pseudo {
	command = "CS";
	name = "ChanServ";
	target = "ChanServ@services.irc.local";
};

pseudo {
	command = "NICKSERV";
	name = "NickServ";
	target = "NickServ@services.irc.local";
};

pseudo {
	command = "NS";
	name = "NickServ";
	target = "NickServ@services.irc.local";
};

pseudo {
	command = "MEMOSERV";
	name = "MemoServ";
	target = "MemoServ@services.irc.local";
};

pseudo {
	command = "MS";
	name = "MemoServ";
	target = "MemoServ@services.irc.local";
};

pseudo {
	command = "OPERSERV";
	name = "OperServ";
	target = "OperServ@services.irc.local";
};

pseudo {
	command = "OS";
	name = "OperServ";
	target = "OperServ@services.irc.local";
};

pseudo {
	command = "HOSTSERV";
	name = "HostServ";
	target = "HostServ@services.irc.local";
};

pseudo {
	command = "HS";
	name = "HostServ";
	target = "HostServ@services.irc.local";
};

pseudo {
	command = "BOTSERV";
	name = "BotServ";
	target = "BotServ@services.irc.local";
};

pseudo {
	command = "BS";
	name = "BotServ";
	target = "BotServ@services.irc.local";
};

channel {
	disable_fake_channels = no;

	invite_client_count = 10;
	invite_client_time = 5 minutes;

	knock_client_count = 1;
	knock_client_time = 5 minutes;

	knock_delay_channel = 1 minute;

	max_channels = 25;

	max_bans = 100;

	default_join_flood_count = 18;
	default_join_flood_time = 6 seconds;

	default_split_user_count = 0;
	default_split_server_count = 0;

	no_create_on_split = yes;
	no_join_on_split = no;
};

/*
 * serverhide {}:  the serverhide block contains the options regarding
 * to server hiding. For more information regarding server hiding,
 * please see doc/serverhide.txt
 */
serverhide {
	/*
	 * disable_remote_commands: disable users issuing commands
	 * on remote servers.
	 */
	disable_remote_commands = no;

	/*
	 * flatten_links: this option will show all servers in /links appear
	 * as though they are linked to this current server.
	 */
	flatten_links = no;

	/*
	 * links_delay: how often to update the links file when it is
	 * flattened.
	 */
	links_delay = 5 minutes;

	/*
	 * hidden: hide this server from a /links output on servers that
	 * support it. This allows hub servers to be hidden etc.
	 */
	hidden = no;

	/*
	 * hide_servers: hide remote servernames everywhere and instead use
	 * hidden_name and network_desc.
	 */
	hide_servers = no;

	/*
	 * hide_services: define this if you want to hide the location of
	 * services servers that are specified in the service {} block.
	 */
	hide_services = no;

	/*
	 * hidden_name: use this as the servername users see if hide_servers = yes.
	 */
	hidden_name = "*.hidden.com";

	/*
	 * hide_server_ips: if this is disabled, opers will be unable to see
	 * servers' IP addresses and will be shown a masked IP address; admins
	 * will be shown the real IP address.
	 *
	 * If this is enabled, nobody can see a server's IP address.
	 * *This is a kludge*: it has the side effect of hiding the IP addresses
	 * everywhere, including logfiles.
	 *
	 * We recommend you leave this disabled, and just take care with who you
	 * give administrator privileges to.
	 */
	hide_server_ips = no;
};

general {
	cycle_on_host_change = yes;

	/* max_watch: maximum WATCH entries a client can have. */
	max_watch = 30;

	/* max_accept: maximum allowed /accept's for +g usermode. */
	max_accept = 30;

	/*
	 * dline_min_cidr: the minimum required length of a CIDR bitmask
	 * for IPv4 based D-lines.
	 */
	dline_min_cidr = 16;

	/*
	 * dline_min_cidr6: the minimum required length of a CIDR bitmask
	 * for IPv6 based D-lines.
	 */
	dline_min_cidr6 = 48;

	/*
	 * kline_min_cidr: the minimum required length of a CIDR bitmask
	 * for IPv4 based K-lines.
	 */
	kline_min_cidr = 16;

	/*
	 * kline_min_cidr6: the minimum required length of a CIDR bitmask
	 * for IPv6 based K-lines.
	 */
	kline_min_cidr6 = 48;

	/*
	 * invisible_on_connect: whether to automatically set mode +i on
	 * connecting users.
	 */
	invisible_on_connect = yes;

	/*
	 * kill_chase_time_limit: KILL chasing is a feature whereby a KILL
	 * issued for a user who has recently changed nickname will be applied
	 * automatically to the new nick. kill_chase_time_limit is the maximum
	 * time following a nickname change that this chasing will apply.
	 */
	kill_chase_time_limit = 30 seconds;

	/*
	 * ignore_bogus_ts: ignore bogus timestamps from other servers.
	 * Yes, this will desync the network, but it will allow chanops
	 * to resync with a valid non TS 0.
	 *
	 * This should be enabled network wide, or not at all.
	 */
	ignore_bogus_ts = no;

	/*
	 * disable_auth: completely disable ident lookups; if you enable this,
	 * be careful of what you set need_ident to in your auth {} blocks.
	 */
	disable_auth = no;

	/*
	 * tkline_expire_notices: enables or disables temporary kline/xline
	 * expire notices.
	 */
	tkline_expire_notices = no;

	/*
	 * default_floodcount: the default value of floodcount that is configurable
	 * via /quote set floodcount. This is the number of lines a user may send
	 * to any other user/channel in one second. Set to 0 to disable.
	 */
	default_floodcount = 10;

	/*
	 * failed_oper_notice: send a notice to all opers on the server when
	 * someone tries to OPER and uses the wrong password, host or ident.
	 */
	failed_oper_notice = yes;

	/*
	 * dots_in_ident: the number of '.' characters permitted in an ident
	 * reply before the user is rejected.
	 */
	dots_in_ident = 2;

	/*
	 * min_nonwildcard: the minimum number of non-wildcard characters in
	 * k/d lines placed via the server. K-lines hand-placed are exempt from
	 * this limit.
	 * Wildcard characters: '.', ':', '*', '?'
	 */
	min_nonwildcard = 4;

	/*
	 * min_nonwildcard_simple: the minimum number of non-wildcard characters
	 * in gecos bans. Wildcard characters: '*', '?'
	 */
	min_nonwildcard_simple = 3;

	/* anti_nick_flood: enable the nickflood control code. */
	anti_nick_flood = yes;

	/*
	 * max_nick_changes, max_nick_time: the number of nick changes allowed in
	 * the specified period.
	 */
	max_nick_changes = 5;
	max_nick_time = 20 seconds;

	/*
	 * away_count, away_time: how many AWAY command are permitted per
	 * client per away_time.
	 */
	away_count = 2;
	away_time = 10 seconds;

	/*
	 * anti_spam_exit_message_time: the minimum time a user must be connected
	 * before custom quit messages are allowed.
	 */
	anti_spam_exit_message_time = 5 minutes;

	/*
	 * ts_warn_delta, ts_max_delta: the time delta allowed between server
	 * clocks before a warning is given, or before the link is dropped.
	 * All servers should run ntpdate/rdate to keep clocks in sync.
	 */
	ts_warn_delta = 3 seconds;
	ts_max_delta = 15 seconds;

	/*
	 * warn_no_connect_block: warn opers about servers that try to connect
	 * but for which we don't have a connect {} block. Twits with
	 * misconfigured servers can become really annoying with this enabled.
	 */
	warn_no_connect_block = yes;

	/*
	 * stats_e_disabled: set this to 'yes' to disable "STATS e" for both
	 * operators and administrators. Doing so is a good idea in case
	 * there are any exempted (exempt {}) server IPs you don't want to
	 * see leaked.
	 */
	stats_e_disabled = no;

	/* stats_m_oper_only: make /stats m/M (messages) oper only. */
	stats_m_oper_only = yes;

	/* stats_o_oper_only: make stats o (opers) oper only. */
	stats_o_oper_only = yes;

	/* stats_P_oper_only: make stats P (ports) oper only. */
	stats_P_oper_only = yes;

	/* stats_u_oper_only: make stats u (uptime) oper only. */
	stats_u_oper_only = no;

	/*
	 * stats_i_oper_only: make stats i (auth {}) oper only. Set to:
	 *     yes    - show users no auth {} blocks, made oper only
	 *     masked - show users the first matching auth {} block
	 *     no     - show users all auth {} blocks
	 */
	stats_i_oper_only = yes;

	/*
	 * stats_k_oper_only: make stats k/K (klines) oper only. Set to:
	 *     yes    - show users no klines, made oper only
	 *     masked - show users the first matching kline
	 *     no     - show users all klines
	 */
	stats_k_oper_only = yes;

	/*
	 * caller_id_wait: time between notifying a +g user that somebody
	 * is messaging them.
	 */
	caller_id_wait = 1 minute;

	/*
	 * opers_bypass_callerid: allows operators to bypass +g and message
	 * anyone who has it set.
	 */
	opers_bypass_callerid = no;

	/*
	 * pace_wait_simple: minimum time required between use of less
	 * intensive commands
	 * (ADMIN, HELP, LUSERS, VERSION, remote WHOIS)
	 */
	pace_wait_simple = 1 second;

	/*
	 * pace_wait: minimum time required between use of more intensive commands
	 * (INFO, LINKS, MAP, MOTD, STATS, WHO, WHOWAS)
	 */
	pace_wait = 10 seconds;

	/*
	 * short_motd: send clients a notice telling them to read the MOTD
	 * instead of forcing an MOTD to clients who may simply ignore it.
	 */
	short_motd = no;

	/*
	 * ping_cookie: require clients to respond exactly to a PING command,
	 * can help block certain types of drones and FTP PASV mode spoofing.
	 */
	ping_cookie = no;

	/* no_oper_flood: increase flood limits for opers. */
	no_oper_flood = yes;

	/* oper_pass_resv: allow opers to over-ride RESVs on nicks/channels. */
	oper_pass_resv = yes;

	/*
	 * max_targets: the maximum number of targets in a single
	 * PRIVMSG/NOTICE. Set to 999 NOT 0 for unlimited.
	 */
	max_targets = 4;

	/*
	 * usermodes configurable: a list of usermodes for the options below
	 *
	 * +b - bots         - See bot and drone flooding notices
	 * +c - cconn        - Client connection/quit notices
	 * +D - deaf         - Don't receive channel messages
	 * +d - debug        - See debugging notices
	 * +e - external     - See remote server connection and split notices
	 * +F - farconnect   - Remote client connection/quit notices
	 * +f - full         - See auth {} block full notices
	 * +G - softcallerid - Server Side Ignore for users not on your channels
	 * +g - callerid     - Server Side Ignore (for privmsgs etc)
	 * +H - hidden       - Hides operator status to other users
	 * +i - invisible    - Not shown in NAMES or WHO unless you share a channel
	 * +j - rej          - See rejected client notices
	 * +k - skill        - See server generated KILL messages
	 * +l - locops       - See LOCOPS messages
	 * +n - nchange      - See client nick changes
	 * +p - hidechans    - Hides channel list in WHOIS
	 * +q - hideidle     - Hides idle and signon time in WHOIS
	 * +R - nononreg     - Only receive private messages from registered clients
	 * +s - servnotice   - See general server notices
	 * +u - unauth       - See unauthorized client notices
	 * +w - wallop       - See server generated WALLOPS
	 * +y - spy          - See LINKS, STATS, TRACE notices etc.
	 */

	/* oper_only_umodes: usermodes only operators may set. */
	oper_only_umodes = bots, cconn, debug, external, farconnect, full, hidden, locops,
			nchange, rej, skill, spy, unauth;

	/* oper_umodes: default usermodes operators get when they /oper or /challenge. */
	oper_umodes = bots, locops, servnotice, wallop;

	/*
	 * throttle_count: the maximum number of connections from the same
	 * IP address allowed in throttle_time duration.
	 */
	throttle_count = 1;

	/*
	 * throttle_time: the minimum amount of time required between
	 * connections from the same IP address. exempt {} blocks are
	 * excluded from this throttling.
	 * Offers protection against flooders who reconnect quickly.
	 * Set to 0 to disable.
	 */
	throttle_time = 2 seconds;
};

modules {
	/*
	 * path: other paths to search for modules specified below
	 * and in "/module load".
	 */
	path = "lib/ircd-hybrid/modules";
#	path = "lib/ircd-hybrid/modules/extra";
	path = "lib/ircd-hybrid/modules/autoload";

	/* module: the name of a module to load on startup/rehash. */
#	module = "some_module.la";
};

/*
 * log {}:  contains information about logfiles.
 */
log {
	/* Do you want to enable logging to ircd.log? */
	use_logging = yes;

	file {
		type = oper;
		name = "var/log/oper.log";
		size = unlimited;
	};

	file {
		type = user;
		name = "var/log/user.log";
		size = 50 megabytes;
	};

	file {
		type = kill;
		name = "var/log/kill.log";
		size = 50 megabytes;
	};

	file {
		type = kline;
		name = "var/log/kline.log";
		size = 50 megabytes;
	};

	file {
		type = dline;
		name = "var/log/dline.log";
		size = 50 megabytes;
	};

	file {
		type = xline;
		name = "var/log/xline.log";
		size = 50 megabytes;
	};

	file {
		type = resv;
		name = "var/log/resv.log";
		size = 50 megabytes;
	};

	file {
		type = debug;
		name = "var/log/debug.log";
		size = 50 megabytes;
	};
};

